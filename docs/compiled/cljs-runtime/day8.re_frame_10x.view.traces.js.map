{"version":3,"sources":["day8/re_frame_10x/view/traces.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.traces/query->fn","query","cljs.core._EQ_","trace","clojure.string/includes?","clojure.string/lower-case","day8.re-frame-10x.view.traces/add-filter","filter-items","filter-input","filter-type","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","day8.re-frame-10x.view.traces/render-traces","visible-traces","trace-detail-expansions","cljs.core/deref","debug?","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","cljs.core.doall","cljs.core.map_indexed","p__42064","map__42065","cljs.core/--destructure-map","cljs.core.get","index","op-type","id","operation","tags","duration","show-row?","cljs.core.get_in","op-name","cljs.core/vector?","cljs.core/second","cljs.core/List","clojure.string.join","G__42066","cljs.core/Keyword","day8.re-frame-10x.material/arrow-drop-down","day8.re-frame-10x.material/arrow-right","ev","cljs.core/name","day8.re-frame-10x.utils.pretty-print-condensed/truncate","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","temp__5735__auto__","vec__42073","seq__42074","cljs.core/seq","first__42075","cljs.core/first","cljs.core/next","_","params","or__4160__auto__","cljs.core.map","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string","js/console","tag-str","cljs.core.prn_str","cljs.core.subs","day8.re-frame-10x.view.traces/render","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.atom","input-error","categories","beginning","end","traces","current-traces","show-epoch-traces?","p1__42085#","p1__42086#","p1__42087#","p1__42088#","toggle-category-fn","traces-to-filter","G__42134","cljs.core.remove","cljs.core.filter","cljs.core/contains?","cljs.core.apply","cljs.core/every-pred","cljs.core.sort_by","save-query","js/isNaN","js/parseFloat","cljs.core/reset!","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/checkbox","cljs.core.keyword","day8.re-frame-10x.view.components/search-input","item","day8.re-frame-10x.utils.re-com/box","cljs.core/count"],"sourcesContent":["(ns day8.re-frame-10x.view.traces\n  (:require [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.svgs :as svgs]\n            [day8.re-frame-10x.material :as material]))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (str/includes? (str/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                     (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(defn add-filter [filter-items filter-input filter-type]\n  (rf/dispatch [:traces/add-filter filter-input filter-type]))\n\n(defn render-traces [visible-traces filter-items filter-input trace-detail-expansions]\n  (let [debug? @(rf/subscribe [:settings/debug?])]\n    (doall\n      (->>\n        visible-traces\n        (map-indexed (fn [index {:keys [op-type id operation tags duration] :as trace}]\n                       (let [show-row? (get-in @trace-detail-expansions [:overrides id]\n                                               (:show-all? @trace-detail-expansions))\n                             op-name   (if (vector? operation)\n                                         (second operation)\n                                         operation)\n                             #_#__ (js/console.log (devtools/header-api-call tags))]\n                         (list [:tr {:key      id\n                                     :on-click #(rf/dispatch [:traces/toggle-trace id])\n                                     :class    (str/join \" \" [\"trace--trace\"\n                                                              (case op-type\n                                                                :sub/create \"trace--sub-create\"\n                                                                :sub/run \"trace--sub-run\"\n                                                                :sub/dispose \"trace--sub-run\"\n                                                                :event \"trace--event\"\n                                                                :render \"trace--render\"\n                                                                :re-frame.router/fsm-trigger \"trace--fsm-trigger\"\n                                                                nil)])}\n                                [:td.trace--toggle\n                                 [:button.expansion-button\n                                  (if show-row?\n                                    [material/arrow-drop-down :fill \"#6EC0E6\"]\n                                    [material/arrow-right :fill \"#6EC0E6\"])]]\n                                [:td.trace--op\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-type) :contains)\n                                                               (.stopPropagation ev))}\n                                  (str op-type)]]\n                                [:td.trace--op-string\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-name) :contains)\n                                                               (.stopPropagation ev))}\n                                  (pp/truncate 20 :middle (pp/str->namespaced-sym op-name)) \" \"\n                                  [:span\n                                   {:style {:opacity 0.5\n                                            :display \"inline-block\"}}\n                                   (when-let [[_ & params] (or (get tags :query-v)\n                                                               (get tags :event))]\n                                     (->> (map pp/pretty-condensed params)\n                                          (str/join \", \")\n                                          (pp/truncate-string :middle 40)))]]]\n                                (if debug?\n                                  [:td.trace--meta\n                                   (:reaction (:tags trace)) \"/\" id]\n                                  [:td.trace--meta\n\n                                   (.toFixed duration 1) \" ms\"])]\n                               (when show-row?\n                                 [:tr.trace--details {:key       (str id \"-details\")\n                                                      :tab-index 0}\n                                  [:td]\n                                  [:td.trace--details-tags {:col-span 2\n                                                            :on-click #(.log js/console trace)}\n                                   [:div.trace--details-tags-text\n                                    (let [tag-str (prn-str tags)]\n                                      (str (subs tag-str 0 400)\n                                           (when (< 400 (count tag-str))\n                                             \" ...\")))]]\n                                  [:td.trace--meta.trace--details-icon\n                                   {:on-click #(.log js/console tags)}]])))))))))\n\n(defn render []\n  (let [filter-input            (r/atom \"\")\n        filter-items            (rf/subscribe [:traces/filter-items])\n        filter-type             (r/atom :contains)\n        input-error             (r/atom false)\n        categories              (rf/subscribe [:traces/categories])\n        trace-detail-expansions (rf/subscribe [:traces/expansions])\n        beginning               (rf/subscribe [:epochs/beginning-trace-id])\n        end                     (rf/subscribe [:epochs/ending-trace-id])\n        traces                  (rf/subscribe [:traces/all-visible-traces])\n        current-traces          (rf/subscribe [:traces/current-event-visible-traces])\n        show-epoch-traces?      (rf/subscribe [:trace-panel/show-epoch-traces?])]\n    (fn []\n      (let [toggle-category-fn #(rf/dispatch [:traces/toggle-categories %])\n            traces-to-filter   (if @show-epoch-traces?\n                                 @current-traces\n                                 @traces)\n            visible-traces     (cond->> traces-to-filter\n                                        ;; Remove cached subscriptions. Could add this back in as a setting later\n                                        ;; but it's pretty low signal/noise 99% of the time.\n                                        true (remove (fn [trace] (and (= :sub/create (:op-type trace))\n                                                                      (get-in trace [:tags :cached?]))))\n                                        (seq @categories) (filter (fn [trace] (when (contains? @categories (:op-type trace)) trace)))\n                                        (seq @filter-items) (filter (apply every-pred (map query->fn @filter-items)))\n                                        true (sort-by :id))\n            save-query         (fn [_]\n                                 (if (and (= @filter-type :slower-than)\n                                          (js/isNaN (js/parseFloat @filter-input)))\n                                   (reset! input-error true)\n                                   (do\n                                     (reset! input-error false)\n                                     (add-filter filter-items @filter-input @filter-type))))]\n        [rc/v-box\n         :class \"tab-contents\"\n         :size \"1\"\n         :children [[rc/v-box\n                     :class \"filter\"\n                     :children [[:div.filter-control\n                                 [:ul.filter-categories \"show: \"\n                                  [:li.filter-category {:class    (when (contains? @categories :event) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:event}])}\n                                   \"events\"]\n                                  [:li.filter-category {:class    (when (contains? @categories :sub/run) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:sub/run :sub/create :sub/dispose}])}\n                                   \"subscriptions\"]\n                                  [:li.filter-category {:class    (when (contains? @categories :render) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:render}])}\n                                   \"reagent\"]\n                                  [:li.filter-category {:class    (when (contains? @categories :re-frame.router/fsm-trigger) \"active\")\n                                                        :on-click #(rf/dispatch [:traces/toggle-categories #{:re-frame.router/fsm-trigger :componentWillUnmount}])}\n                                   \"internals\"]]\n                                 [rc/checkbox\n                                  :model show-epoch-traces?\n                                  :on-change #(rf/dispatch [:trace-panel/update-show-epoch-traces? %])\n                                  :label \"Only show traces for this epoch?\"]\n                                 [:div.filter-fields\n                                  [:select {:value     @filter-type\n                                            :on-change #(reset! filter-type (keyword (.. % -target -value)))}\n                                   [:option {:value \"contains\"} \"contains\"]\n                                   [:option {:value \"slower-than\"} \"slower than\"]]\n                                  [:div.filter-control-input {:style {:margin-left 10}}\n                                   [components/search-input {:on-save     save-query\n                                                             :on-change   #(reset! filter-input (.. % -target -value))\n                                                             :placeholder \"Type to filter traces\"}]\n                                   (if @input-error\n                                     [:div.input-error {:style {:color \"red\" :margin-top 5}}\n                                      \"Please enter a valid number.\"])]]]\n                                [:ul.filter-items\n                                 (map (fn [item]\n                                        ^{:key (:id item)}\n                                        [:li.filter-item\n                                         [:button.button\n                                          {:style    {:margin 0}\n                                           :on-click #(rf/dispatch [:traces/remove-filter (:id item)])}\n                                          (:filter-type item) \": \" [:span.filter-item-string (:query item)]]])\n                                      @filter-items)]]]\n                    [rc/box\n                     :size \"1\"\n                     :style {:padding-top \"20px\"\n                             :margin      \"0px 10px\"\n                             :overflow    \"auto\"}\n                     :child [:table\n                             [:thead>tr\n                              [:th {:style {:padding 0}}\n                               [:button.text-button\n                                {:style    {:cursor \"pointer\"}\n                                 :on-click #(rf/dispatch [:traces/toggle-all-expansions])}\n                                (if (:show-all? @trace-detail-expansions) \"-\" \"+\")]]\n                              [:th \"operations\"]\n                              [:th\n                               (str (count visible-traces) \" traces\")\n                               [:span \"(\" [:button.text-button {:on-click #(rf/dispatch [:epochs/reset])} \"clear\"] \")\"]]\n                              [:th {:style {:text-align \"right\"}} \"meta\"]]\n                             [:tbody (render-traces visible-traces filter-items filter-input trace-detail-expansions)]]]]]))))\n"]}