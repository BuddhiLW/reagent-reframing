{"version":3,"sources":["ajax/xhrio.cljs"],"mappings":";AAWA,AAAA,AAAA,AAAA,AAAAA,AAAaC;;AAAb,AAAA,AAAA,AAAaA,AAEX,AAAAC,AACGI,AAKAS;AANH,AAAA,AAAAZ,AAAAD;AAAAC,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF,AAAA,AAEWI;AAFX,AAAAF,AAAAF,AAAA,AAEeK;AAFf,AAAAH,AAAAF,AAAA,AAEsBM;AAFtB,AAAAJ,AAAAF,AAAA,AAE2BO;AAF3B,AAAAL,AAAAF,AAAA,AAAA,AAEmCQ;AAFnC,AAAAN,AAAAF,AAAA,AAAA,AAE2CS;AAF3C,AAAAP,AAAAF,AAAA,AAGWU;AAHX,AAAAR,AAAAF,AAAA,AAG2BW;AAH3B,AAAA,AAAA,AACGR;AADH,AAOE,AAAAU,AAAyB,AAAA,AAAOH;AAAhC,AAAA,AAAAG;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAkBX,AAAK,AAACY,AAAKD;;AAD/B;;AAEA,AAAM,AAACE,AAAIL;AAAX,AACE,AAAAM,AAAMd;AAAN,AAAA,AAAAc,AAAA;;AAAA,AAAAA,AAEGC,AAAcC,AAAmCR;;AAFpDM;AADF;;AAIA,AAAAG,AAAMjB;AAAN,AAAA,AAAAiB,AAAA,AAAAC,AACGH,AAAcI;AADjB,AAEkB,AAAAC,AAAS,AAAAF;AAAT,AAAA,AAAAE,AAAAA,AAACX,AAAAA,AAAAA;;;AAFnB,AAAAQ,AAGuBZ;;AAHvB,AAAAY,AAIuBX;;AAJvB,AAAAW,AAKShB,AAAIC,AAAOC,AAAK,AAACkB,AAAQjB;;AALlCa;;;AAfJ,AAAA,AAAA,AAAAvB,AAAaC;;AAAb,AAAA,AAAA,AAAaA,AAsBX,AAASK;AAAT,AAAA,AAAA,AAASA;AAAT,AAAe,AAAQA,AAAKsB;;;AAtB9B,AAAA,AAAA,AAAA5B,AAAaC;;AAAb,AAAA,AAAA,AAAaA,AAwBX,AAAQK;AAAR,AAAA,AAAA,AAAQA;AAAR,AAAc,AAAcA;;;AAxB9B,AAAA,AAAA,AAAaL,AAyBX,AAAUK;AAAV,AAAA,AAAA,AAAUA;AAAV,AAAgB,AAAYA;;;AAzB9B,AAAA,AAAA,AAAaL,AA0BX,AAAeK;AAAf,AAAA,AAAA,AAAeA;AAAf,AAAqB,AAAgBA;;;AA1BvC,AAAA,AAAA,AAAaL,AA2BX,AAAmBK;AAAnB,AAAA,AAAA,AAAmBA;AAAnB,AACE,AAACuB,AAAQ,AAAqBvB;;;AA5BlC,AAAA,AAAA,AAAaL,AA6BX,AAAuBK,AAAKwB;AAA5B,AAAA,AAAA,AAAuBxB;AAAvB,AACE,AAAoBA,AAAKwB;;;AA9B7B,AAAA,AAAA,AAAa7B,AA+BX,AAAeK;AAAf,AAAA,AAAA,AAAeA;AAAf,AACE,AAACyB,AAAE,AAAmBzB,AAAMsB;;AAEhC,AAAA,AAAA,AAAA,AAAA5B,AAAagC;;AAAb,AAAA,AAAA,AAAaA,AAEX,AAAAC,AACG3B,AAGAS;AAJH,AAAA,AAAAmB,AAAAD;AAAAC,AAAA,AAAA9B,AAAA8B;AAAA,AAAA7B,AAAA6B,AAAA,AACgB3B;AADhB,AAAAF,AAAA6B,AAAA,AACoB1B;AADpB,AAAAH,AAAA6B,AAAA,AAC2BzB;AAD3B,AAAAJ,AAAA6B,AAAA,AACgCxB;AADhC,AAAAL,AAAA6B,AAAA,AAEgBC;AAFhB,AAAA9B,AAAA6B,AAAA,AAAA,AAEmBvB;AAFnB,AAAAN,AAAA6B,AAAA,AAE2BE;AAF3B,AAAA/B,AAAA6B,AAAA,AAEoCG;AAFpC,AAAA,AAAA,AACG/B;AADH,AAKE,AAAOA,AAAK6B,AAAG5B,AAAIC,AAAOC,AAAK,AAACkB,AAAQjB,AACjC0B,AAASrB,AAAQsB","names":["cljs.core/PROTOCOL_SENTINEL","js/goog.net.XhrIo","p__37055","map__37059","cljs.core/--destructure-map","cljs.core.get","this","uri","method","body","headers","timeout","with-credentials","response-format","progress-handler","handler","temp__5735__auto__","response-type","cljs.core/name","cljs.core/fn?","G__37060","goog.events/listen","js/goog.net.EventType.UPLOAD_PROGRESS","G__37061","p1__37053#","goog.net.EventType/COMPLETE","G__37062","cljs.core/clj->js","goog.net.ErrorCode/ABORT","cljs.core.js__GT_clj","header","cljs.core._EQ_","js/goog.net.XhrManager","p__37069","map__37070","id","priority","max-retries"],"sourcesContent":["(ns ajax.xhrio\n  (:require goog.net.EventType\n            goog.net.ErrorCode\n            [goog.net.XhrIo :as xhr]\n            [goog.net.XhrManager :as xhrm]\n            [goog.Uri :as uri]\n            [goog.json :as goog-json]\n            [goog.events :as events]\n            [ajax.protocols :refer [AjaxImpl AjaxRequest\n                                    AjaxResponse Interceptor]]))\n\n(extend-type goog.net.XhrIo\n  AjaxImpl\n  (-js-ajax-request\n    [this\n     {:keys [uri method body headers timeout with-credentials\n             response-format progress-handler]\n      :or {with-credentials false\n           timeout 0}}\n     handler]\n    (when-let [response-type (:type response-format)]\n      (.setResponseType this (name response-type)))\n    (when (fn? progress-handler)\n      (doto this\n        (.setProgressEventsEnabled true)\n        (events/listen goog.net.EventType.UPLOAD_PROGRESS progress-handler)))\n    (doto this\n      (events/listen goog.net.EventType/COMPLETE\n                     #(handler (.-target %)))\n      (.setTimeoutInterval timeout)\n      (.setWithCredentials with-credentials)\n      (.send uri method body (clj->js headers))))\n  AjaxRequest\n  (-abort [this] (.abort this goog.net.ErrorCode/ABORT))\n  AjaxResponse\n  (-body [this] (.getResponse this))\n  (-status [this] (.getStatus this))\n  (-status-text [this] (.getStatusText this))\n  (-get-all-headers [this]\n    (js->clj (.getResponseHeaders this)))\n  (-get-response-header [this header]\n    (.getResponseHeader this header))\n  (-was-aborted [this]\n    (= (.getLastErrorCode this) goog.net.ErrorCode/ABORT)))\n\n(extend-type goog.net.XhrManager\n  AjaxImpl\n  (-js-ajax-request\n    [this {:keys [uri method body headers\n                  id timeout priority max-retries]\n           :or {timeout 0}}\n     handler]\n    (.send this id uri method body (clj->js headers)\n           priority handler max-retries)))\n"]}