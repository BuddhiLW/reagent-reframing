{"version":3,"sources":["cider/nrepl/inlined_deps/suitable/v0v4v0/suitable/js_introspection.cljs"],"mappings":"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","names":["cider.nrepl.inlined-deps.suitable.v0v4v0.suitable.js-introspection/own-property-descriptors","js/Object","obj","js/Object.getOwnPropertyDescriptors","js/Object.getOwnPropertyNames","cljs.core.map","key","js/Object.getOwnPropertyDescriptor","cljs.core.into","cljs.core/clj->js","cider.nrepl.inlined-deps.suitable.v0v4v0.suitable.js-introspection/properties-by-prototype","protos","js/Object.getPrototypeOf","cljs.core.conj","var_args","G__37402","cider.nrepl.inlined-deps.suitable.v0v4v0.suitable.js-introspection/property-names-and-types","js/Error","js-obj","cider.nrepl.inlined_deps.suitable.v0v4v0.suitable.js_introspection.property_names_and_types","prefix","seen","cljs.core/transient","iter__4564__auto__","s__37404","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","vec__37409","cljs.core/first","cljs.core.nth","map__37412","cljs.core/--destructure-map","cljs.core.get","iterys__4560__auto__","s__37406","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","cljs.core/count","b__37408","cljs.core/chunk-buffer","i__37407","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37405","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4561__auto__","cljs.core.concat","iter__37403","i","props","cljs.core.map_indexed","cljs.core/vector","cljs.core/js-keys","cljs.core/not","cljs.core/empty?","clojure.string/starts-with?","prop","goog.object/get","cljs.core.conj_BANG_","e37413","e37414","temp__5733__auto__","value","or__4160__auto__","cljs.core.apply","cljs.core/fn?","e","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:mranderson/inlined true} cider.nrepl.inlined-deps.suitable.v0v4v0.suitable.js-introspection\n  (:require [clojure.string :refer [starts-with?]]\n            [goog.object :refer [get] :rename {get oget}]))\n\n(def own-property-descriptors\n  (if (js-in \"getOwnPropertyDescriptors\" js/Object)\n    ;; ES 6+ version\n    (fn [obj] (js/Object.getOwnPropertyDescriptors obj))\n    ;; ES 5.1 version\n    (fn [obj] (->> obj\n                   js/Object.getOwnPropertyNames\n                   (map (fn [key] [key (js/Object.getOwnPropertyDescriptor obj key)]))\n                   (into {})\n                   clj->js))))\n\n(defn properties-by-prototype\n  \"\"\n  [obj]\n  (loop [obj obj protos []]\n    (if obj\n      (recur\n       (js/Object.getPrototypeOf obj)\n       (conj protos {:obj obj :props (own-property-descriptors obj)}))\n      protos)))\n\n(defn property-names-and-types\n  ([js-obj] (property-names-and-types js-obj nil))\n  ([js-obj prefix]\n   (let [seen (transient #{})]\n     (for [[i {:keys [obj props]}] (map-indexed vector (properties-by-prototype js-obj))\n           key (js-keys props)\n           :when (and (not (get seen key))\n                      (or (empty? prefix)\n                          (starts-with? key prefix)))]\n       (let [prop (oget props key)]\n         (conj! seen key)\n         {:name key\n          :hierarchy i\n          :type (try\n                  (if-let [value (or (oget prop \"value\")\n                                     (-> prop (oget \"get\")\n                                         (apply [])))]\n                    (if (fn? value) \"function\" \"var\")\n                    \"var\")\n                  (catch js/Error e \"var\"))})))))\n\n(comment\n  (require '[cljs.pprint :refer [pprint]])\n  ;; (-> js/console property-names-and-types pprint)\n  (-> js/document.body property-names-and-types pprint)\n\n  (let [obj (new (fn [x] (this-as this (goog.object/set this \"foo\" 23))))]\n    (pprint (property-names-and-types obj)))\n\n  (oget js/console \"log\")\n  (-> js/console property-names-and-types pprint)\n  (-> js/window property-names-and-types pprint))\n"]}