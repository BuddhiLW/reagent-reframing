{"version":3,"sources":["day8/re_frame_10x/inlined_deps/garden/v1v3v10/garden/units.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/length-units","cljs.core.keyword","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/angular-units","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/time-units","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/frequency-units","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/resolution-units","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/unit?","x","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types/CSSUnit","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/length?","cljs.core/contains?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/angle?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/time?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/frequency?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/resolution?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/conversions","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/convertable?","unit","p__36641","map__36642","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/convert","m","left","right","cljs.core/every?","v1","cljs.core.get_in","v2","cljs.core.ex_info","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.util.format","cljs.core/name","cljs.core/first","cljs.core.drop_while","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/unit-re","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/read-unit","s","temp__5735__auto__","vec__36643","cljs.core.nth","_","magnitude","cljs.core/re-matches","cljs.reader.read_string","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/make-unit-predicate","cljs.core._EQ_","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/make-unit-fn","ex-message","ex-data","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/make-unit-adder","u","y","map__36648","map__36649","m1","m2","more","cljs.core.reduce","u+","day8$re_frame_10x$inlined_deps$garden$v1v3v10$garden$units$make_unit_adder_$_u_PLUS_","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/make-unit-subtractor","map__36650","map__36651","u-","day8$re_frame_10x$inlined_deps$garden$v1v3v10$garden$units$make_unit_subtractor_$_u_","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/make-unit-multiplier","op","cljs.core/*","map__36656","map__36657","u*","day8$re_frame_10x$inlined_deps$garden$v1v3v10$garden$units$make_unit_multiplier_$_u_STAR_","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/make-unit-divider","cljs.core//","map__36665","map__36666","ud","day8$re_frame_10x$inlined_deps$garden$v1v3v10$garden$units$make_unit_divider_$_ud","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/cm?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/cm+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/cm-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/cm*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/cm-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/cm","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/mm?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/mm+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/mm-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/mm*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/mm-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/mm","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/in?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/in+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/in-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/in*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/in-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/in","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pt?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pt+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pt-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pt*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pt-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pt","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pc?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pc+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pc-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pc*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pc-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/pc","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/percent?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/percent+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/percent-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/percent*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/percent-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/percent","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/em?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/em+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/em-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/em*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/em-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/em","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ex?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ex+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ex-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ex*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ex-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ex","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ch?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ch+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ch-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ch*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ch-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ch","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rem?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rem+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rem-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rem*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rem-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rem","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vw?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vw+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vw-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vw*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vw-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vw","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vh?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vh+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vh-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vh*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vh-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vh","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmin?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmin+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmin-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmin*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmin-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmin","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmax?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmax+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmax-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmax*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmax-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/vmax","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/deg?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/deg+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/deg-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/deg*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/deg-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/deg","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/grad?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/grad+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/grad-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/grad*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/grad-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/grad","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rad?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rad+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rad-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rad*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rad-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/rad","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/turn?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/turn+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/turn-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/turn*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/turn-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/turn","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/s?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/s+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/s-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/s*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/s-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/s","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/Hz?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/Hz+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/Hz-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/Hz*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/Hz-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/Hz","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/kHz?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/kHz+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/kHz-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/kHz*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/kHz-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/kHz","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpi?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpi+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpi-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpi*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpi-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpi","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpcm?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpcm+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpcm-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpcm*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpcm-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dpcm","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dppx?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dppx+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dppx-","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dppx*","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dppx-div","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/dppx"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units\n  \"Functions and macros for working with CSS units.\"\n  (:refer-clojure :exclude [rem])\n  #?@(:clj\n     [(:require\n       [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :as types]\n       [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util :as util])\n      (:import\n       [day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.types CSSUnit])])\n  #?@(:cljs\n      [(:require\n        [cljs.reader :refer [read-string]]\n        [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :as types :refer [CSSUnit]]\n        [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util :as util])\n       (:require-macros\n        [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units :refer [defunit]])]))\n\n;;;; ## Unit families\n\n(def length-units\n  #{:in :cm :pc :mm :pt :px (keyword \"%\")})\n\n(def angular-units\n  #{:deg :grad :rad :turn})\n\n(def time-units\n  #{:s :ms})\n\n(def frequency-units\n  #{:Hz :kHz})\n\n(def resolution-units\n  #{:dpi :dpcm :dppx})\n\n;;;; ## Unit predicates\n\n(defn unit?\n  \"True if x is of type CSSUnit.\"\n  [x]\n  (instance? CSSUnit x))\n\n(defn length?\n  [x]\n  (and (unit? x)\n       (contains? length-units (:unit x))))\n\n(defn angle?\n  [x]\n  (and (unit? x)\n       (contains? angular-units (:unit x))))\n\n(defn time?\n  [x]\n  (and (unit? x)\n       (contains? time-units (:unit x))))\n\n(defn frequency?\n  [x]\n  (and (unit? x)\n       (contains? frequency-units (:unit x))))\n\n(defn resolution?\n  [x]\n  (and (unit? x)\n       (contains? resolution-units (:unit x))))\n\n;;;; ## Unit conversion\n\n(def ^{:private true\n       :doc \"Map associating CSS unit types to their conversion values.\"}\n  conversions\n  {;; Absolute units\n   :cm {:cm 1\n        :mm 10\n        :pc 2.36220473\n        :pt 28.3464567\n        :px 37.795275591}\n   :in {:cm 2.54\n        :in 1\n        :mm 25.4\n        :pc 6\n        :pt 72\n        :px 96}\n   :mm {:mm 1\n        :pt 2.83464567\n        :px 3.7795275591}\n   :pc {:mm 4.23333333\n        :pc 1\n        :pt 12\n        :px 16}\n   :pt {:pt 1\n        :px 1.3333333333}\n   :px {:px 1}\n   (keyword \"%\") {(keyword \"%\") 1}\n\n   ;; Relative untis\n   :em {:em 1}\n   :rem {:rem 1}\n\n   ;; Angular units\n   :deg {:deg 1\n         :grad 1.111111111\n         :rad 0.0174532925\n         :turn 0.002777778}\n   :grad {:grad 1\n          :rad 63.661977237\n          :turn 0.0025}\n   :rad {:rad 1\n         :turn 0.159154943}\n   :turn {:turn 1}\n\n   ;; Time units\n   :s {:ms 1000\n       :s 1}\n   :ms {:ms 1}\n\n   ;; Frequency units\n   :Hz {:Hz 1\n        :kHz 0.001}\n   :kHz {:kHz 1}})\n\n(defn- convertable?\n  \"True if unit is a key of convertable-units, false otherwise.\"\n  [unit]\n  (contains? conversions unit))\n\n(defn- convert\n  \"Convert a Unit with :unit left to a Unit with :unit right if possible.\"\n  [{m :magnitude left :unit} right]\n  (if (every? convertable? [left right])\n    (let [v1 (get-in conversions [left right])\n          v2 (get-in conversions [right left])]\n      (cond\n        v1\n        (CSSUnit. right (* v1 m))\n\n        v2\n        (CSSUnit. right (/ m v2))\n\n       ;; Both units are convertible but no conversion between them exists.\n       :else\n       (throw\n        (ex-info\n         (util/format \"Can't convert %s to %s\" (name left) (name right)) {}))))\n    ;; Display the inconvertible unit.\n    (let [x (first (drop-while convertable? [left right]))]\n      (throw (ex-info (str \"Inconvertible unit \" (name x)) {})))))\n\n;;;; ## Unit helpers\n\n(def ^{:doc \"Regular expression for matching a CSS unit. The magnitude\n             and unit are captured.\"\n       :private true}\n  unit-re\n  #\"([+-]?\\d+(?:\\.?\\d+)?)(p[xtc]|in|[cm]m|%|r?em|ex|ch|v(?:[wh]|m(?:in|ax))|deg|g?rad|turn|m?s|k?Hz|dp(?:i|cm|px))\")\n\n(defn read-unit\n  \"Read a `CSSUnit` object from the string `s`.\"\n  [s]\n  (when-let [[_ magnitude unit] (re-matches unit-re s)]\n    (let [unit (keyword unit)\n          magnitude (if magnitude (read-string magnitude) 0)]\n      (CSSUnit. unit magnitude))))\n\n(defn make-unit-predicate\n  \"Creates a function for verifying the given unit type.\"\n  [unit]\n  (fn [x] (and (unit? x) (= (:unit x) unit))))\n\n(defn make-unit-fn\n  \"Creates a function for creating and converting `CSSUnit`s for the\n  given unit. If a number n is passed the function it will produce a\n  new `CSSUnit` record with a the magnitude set to n. If a `CSSUnit`\n  is passed the function will attempt to convert it.\"\n  [unit]\n  (fn [x]\n    (cond\n      (number? x)\n      (CSSUnit. unit x)\n\n      (unit? x)\n      (if (and (= (unit x) unit))\n        x\n        (convert x unit))\n\n      :else\n      (let [ex-message (util/format \"Unable to convert %s to %s\"\n                                    x\n                                    (name unit))\n            ex-data {:given {:x x\n                             :unit unit}}]\n        (throw\n         (ex-info ex-message ex-data))))))\n\n(defn make-unit-adder\n  \"Create a addition function for adding Units.\"\n  [unit]\n  (let [u (make-unit-fn unit)]\n    (fn u+\n      ([] (u 0))\n      ([x] (u x))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (+ m1 m2))))\n      ([x y & more]\n         (reduce u+ (u+ x y) more)))))\n\n(defn make-unit-subtractor\n  \"Create a subtraction function for subtracting Units.\"\n  [unit]\n  (let [u (make-unit-fn unit)]\n    (fn u-\n      ([x] (u (- x)))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (- m1 m2))))\n      ([x y & more]\n         (reduce u- (u- x y) more)))))\n\n(defn make-unit-multiplier\n  \"Create a multiplication function for multiplying Units.\"\n  [unit]\n  (let [u  (make-unit-fn unit)\n        op (if (= unit :%)\n            (fn percent*\n              [x y]\n              (/ (* x y) 100))\n            *)]\n    (fn u*\n      ([] (u 1))\n      ([x] (u x))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (op m1 m2))))\n      ([x y & more]\n         (reduce u* (u* x y) more)))))\n\n(defn make-unit-divider\n  \"Create a division function for dividing Units.\"\n  [unit]\n  (let [u (make-unit-fn unit)\n        op (if (= unit :%)\n            (fn percent-div\n              [x y]\n              (* 100 (/ x y)))\n             /)]\n    (fn ud\n      ([x] (u (/ 1 x)))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (op m1 m2))))\n      ([x y & more]\n         (reduce ud (ud x y) more)))))\n\n#?(:clj\n   (defmacro defunit\n     \"Create a suite of functions for unit creation, conversion,\n  validation, and arithmetic.\"\n     ([name]\n      `(defunit ~name ~name))\n     ([name unit]\n      (let [k (keyword unit)\n            append #(symbol (str name %))]\n        `(do\n           (def ~name (make-unit-fn ~k))\n           (def ~(append \\?) (make-unit-predicate ~k))\n           (def ~(append \\+) (make-unit-adder ~k))\n           (def ~(append \\-) (make-unit-subtractor ~k))\n           (def ~(append \\*) (make-unit-multiplier ~k))\n           (def ~(append \"-div\") (make-unit-divider ~k)))))))\n\n(comment\n  ;; This:\n  (defunit px)\n  ;; Is equivalent to:\n  (def px  (make-unit-fn :px))\n  (def px? (make-unit-predicate :px))\n  (def px+ (make-unit-adder :px))\n  (def px- (make-unit-subtractor :px))\n  (def px* (make-unit-multiplier :px))\n  (def px-div (make-unit-divider :px)))\n\n;; # Predefined units\n\n;; Absolute units\n\n(defunit cm)\n(defunit mm)\n(defunit in)\n(defunit px)\n(defunit pt)\n(defunit pc)\n(defunit percent \"%\")\n\n;; Font-relative units\n\n(defunit em)\n(defunit ex)\n(defunit ch)\n(defunit rem)\n\n;; Viewport-percentage lengths\n\n(defunit vw)\n(defunit vh)\n(defunit vmin)\n(defunit vmax)\n\n;; Angles\n\n(defunit deg)\n(defunit grad)\n(defunit rad)\n(defunit turn)\n\n;; Times\n\n(defunit s)\n(defunit ms)\n\n;; Frequencies\n\n(defunit Hz)\n(defunit kHz)\n\n;; Resolutions\n\n(defunit dpi)\n(defunit dpcm)\n(defunit dppx)\n"]}