{"version":3,"sources":["spade/runtime.cljs"],"mappings":";AAKA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAGEC,AAAW,AAAA,AAACC;;AAEd,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAAA,AAAA,AAAmBC,AACDC;;AAElB,AAAA,AAAMC,AAAWC;AAAjB,AACE,AAAA,AAACC,AAAoBD;;AAEvB,AAAA,AAAME,AAAaC;AAAnB,AACE,AAACC,AAAWP,AAAoBM;;AAElC,AAAA,AAAOE,AAAiBC,AAAIC;AAA5B,AACE,AAAM,AAAa,AAAA,AAAUD,AAAMC;;AAErC,AAAA,AAAMC,AAASC,AAAGF;AAAlB,AACE,AAACG,AAAMhB,AAAWiB,AAAOF,AAClB,AAA2BH;AAA3B,AACE,AAAU,AAACM,AAAE,AAAA,AAASN,AAAKC;AAA3B;AAAA,AACE,AAACF,AAAgBC,AAAIC;;;AACvB,AAAA,AAACM,AAAMP,AAAYC;;;AAE9B,AAAA,AAAMO,AAASL,AAAGF;AAAlB,AACE,AAAMQ,AAAK,AAAQC;AACbC,AAAQ,AAAAC,AAAM,AAAA,AAACC;AAAP,AAAA,AAAAD,AAAA,AAC4B,AAAKT;;AADjCS;;AADd,AAAA,AAAA,AAAA,AAGMZ,AAAcW,AACDV,AACJE;AALf,AAME,AAAQ,AAAA,AAAA,AAAOM;AAAf;AAAA,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAGA,AAAcL,AAAKE;;AAEnB,AAACP,AAAMhB,AAAW2B,AAAMZ,AAAGH;;AAC3B,AAACD,AAAgBC,AAAIC;;AAEzB,AAAA,AAAAe,AAAOI;AAAP,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF,AAAA,AAAuBI;AAAvB,AAAAF,AAAAF,AAAA,AAAwCK;AAAxC,AACE,AAAA,AAAAC,AAAQD;AACND;;AACA,AAAA,AAACG,AAKW,AAACG,AAAI,AAAKC;AAAL,AACE,AACE,AAASA;AAAMA;;AADjB,AAIE,AAAK,AAACC,AAAKD,AACN,AAAS,AAAA,AAAQA;AACtB,AAAA,AAAQA;;AANV,AASE,AAAO,AAAAd,AACE,AAAA,AACKc;;;;AAfvB,AAAA,AAAI,AAACH,AAAKH,AACR,AAACI,AAAKJ,AAASD,AACdC,AAASD;;;AAe5B,AAAA,AAAMS,AAAeC,AAAKC,AAAgBC,AAAQC;AAAlD,AACE,AAAAC,AAA2C,AAACE,AAAMJ,AAAQD,AAAgBE,AAAOA;AAAjFC,AAAA,AAAAjB,AAAAiB;AAAAA,AAAqCC;AAArC,AAAAjB,AAAAgB,AAAA,AAAOlC;AAAP,AAAAkB,AAAAgB,AAAA,AAAgBd;AACViB,AAAS,AAAA,AAAAC,AAACpB,AAAK/B,AAAWiC;AADhC,AAGE,AAAIiB;AAEF,AAACpC,AAAQmB,AAAWpB;;AAGpB,AAACO,AAAQa,AAAWpB;;;AAEtB,AAAAuC,AAAMT;AAANS,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA,AACiB,AAACpB,AAAcgB;;;AADhC;AAAA;AAEsB,AAAChB,AAAcgB;;;AAFrC;AAGUnC;;;;AAHV,AAAA,AAAAa,AAAA,AAAA,AAAA0B","names":["js/spade","js/spade.runtime","js/spade.runtime.*injected*","spade.runtime/*injected*","cljs.core.atom","js/spade.runtime.*css-compile-flags*","spade.runtime/*css-compile-flags*","js/goog.DEBUG","spade.runtime/->css-var","n","garden.types/->CSSFunction","spade.runtime/compile-css","elements","garden.core.css","spade.runtime/perform-update!","obj","css","spade.runtime/update!","id","cljs.core.swap_BANG_","cljs.core/update","cljs.core._EQ_","cljs.core.assoc","spade.runtime/inject!","head","js/document","element","G__53856","js/document.createElement","js/Error","cljs.core/assoc","p__53857","map__53858","cljs.core/--destructure-map","cljs.core.get","spade.runtime/compose-names","style-name","composed","cljs.core/not","clojure.string.join","cljs.core/seq?","cljs.core.into","cljs.core.map","item","cljs.core/map?","spade.runtime/ensure-style!","mode","base-style-name","factory","params","map__53859","info","cljs.core.apply","existing","cljs.core/deref","G__53860","cljs.core/Keyword"],"sourcesContent":["(ns spade.runtime\n  (:require [clojure.string :as str]\n            [garden.core :as garden]\n            [garden.types :refer [->CSSFunction]]))\n\n(defonce\n  ^{:private true\n    :dynamic true}\n  *injected* (atom {}))\n\n(defonce ^:dynamic *css-compile-flags*\n  {:pretty-print? goog.DEBUG})\n\n(defn ->css-var [n]\n  (->CSSFunction \"var\" n))\n\n(defn compile-css [elements]\n  (garden/css *css-compile-flags* elements))\n\n(defn- perform-update! [obj css]\n  (set! (.-innerHTML (:element obj)) css))\n\n(defn update! [id css]\n  (swap! *injected* update id\n         (fn update-injected-style [obj]\n           (when-not (= (:source obj) css)\n             (perform-update! obj css))\n           (assoc obj :source css))))\n\n(defn inject! [id css]\n  (let [head (.-head js/document)\n        element (doto (js/document.createElement \"style\")\n                  (.setAttribute \"spade-id\" (str id)))\n        obj {:element element\n             :source css\n             :id id}]\n    (assert (some? head)\n            \"An head element is required in the dom to inject the style.\")\n\n    (.appendChild head element)\n\n    (swap! *injected* assoc id obj)\n    (perform-update! obj css)))\n\n(defn- compose-names [{style-name :name composed :composes}]\n  (if-not composed\n    style-name\n    (str/join \" \"\n              (->>\n                (if (seq? composed)\n                  (into composed style-name)\n                  [composed style-name])\n                (map (fn [item]\n                       (cond\n                         (string? item) item\n\n                         ; unpack a defattrs\n                         (and (map? item)\n                              (string? (:class item)))\n                         (:class item)\n\n                         :else\n                         (throw (js/Error.\n                                  (str \"Invalid argument to :composes key:\"\n                                       item))))))))))\n\n(defn ensure-style! [mode base-style-name factory params]\n  (let [{css :css style-name :name :as info} (apply factory base-style-name params params)\n        existing (get @*injected* style-name)]\n\n    (if existing\n      ; update existing style element\n      (update! style-name css)\n\n      ; create a new element\n      (inject! style-name css))\n\n    (case mode\n      :attrs {:class (compose-names info)}\n      (:class :keyframes) (compose-names info)\n      :global css)))\n"]}