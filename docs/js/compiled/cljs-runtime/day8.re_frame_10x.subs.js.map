{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","db","_","cljs.core.get","settings","p__43857","vec__43858","cljs.core.nth","panel-width%","n","Math/ceil","p__43863","vec__43864","width","cljs.core.sort_by","cljs.core/vals","trace","cljs.core.get_in","app-db-settings","p1__43867#","cljs.core.map","cljs.core.assoc","cljs.core/val","cljs.core/key","p__43870","vec__43871","expansions","path","cljs.core/contains?","root","traces","cljs.core/count","p__43875","vec__43876","beginning","ending","cljs.core.into","day8.re-frame-10x.utils.utils/id-between-xf","p__43879","vec__43880","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","day8.re-frame-10x.metamorphic/render?","cljs.core.subs","clojure.string.last_index_of","trace-root","snapshot","epochs","cljs.core.juxt","day8.re-frame-10x.metamorphic/matched-event","cljs.core/first","cljs.core/>","p__43905","vec__43906","match-ids","current-id","match","cljs.core/last","match-state","p__43918","vec__43920","current","ids","p__43925","vec__43926","day8.re-frame-10x.utils.utils/last-in-vec","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","p1__43932#","cljs.core.filter","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","frame-traces","var_args","G__43944","day8.re-frame-10x.subs/+nil","args-arr__4792__auto__","len__4771__auto__","i__4772__auto__","argseq__4793__auto__","cljs.core/IndexedSeq","seq43941","G__43942","cljs.core/next","G__43943","self__4758__auto__","x","y","more","cljs.core.reduce","cljs.core/+","p__43949","p__43950","vec__43951","vec__43954","af-start-end","epoch-traces","frame-number","vec__43957","frame-pairs","cljs.core.partition","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","day8.re-frame-10x.metamorphic/subscription?","render-time","map__43960","cljs.core/--destructure-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","start-of-render","cljs.core/empty?","epoch","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__43972#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl","G__43978","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__43979","cljs.core/map?","G__43987","day8.re-frame-10x.subs/sub-type-value","sub-type","G__43988","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5733__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__43991","p__43992","p__43993","vec__43995","vec__43998","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_","me","cljs.core/constantly","subx","state","sub","cljs.core.pr_str","or__4160__auto__","p__44001","vec__44002","all-subs","ignore-unchanged-l2?","filter-str","pins","compare-fn","s1","s2","p1","cljs.core/boolean","p2","G__44006","cljs.core.sort","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","p__44013","map__44014","id","clojure.string/includes?","subs","cljs.core.mapcat","cljs.core/frequencies","counts","cljs.core.keep_indexed","i","temp__5739__auto__","code","cljs.core.map_indexed","cljs.core/vec","form","zprint.core/zprint-str","day8.re-frame-10x.subs/canvas","js/document.createElement","context","p__44027","vec__44028","window-width","char-width","component","errors"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/all-events-by-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (->> (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n              (:matches-by-id epochs))\n         (sort-by first >))))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n\n(rf/reg-sub\n  :subs/filter-str\n  :<- [:subs/root]\n  (fn [root _]\n    (:filter-str root)))\n\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  :<- [:subs/filter-str]\n  :<- [:subs/sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n               ignore-unchanged-l2? (remove metam/unchanged-l2-subscription?)\n               (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                                (or (str/includes? path filter-str)\n                                                    (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n(rf/reg-sub\n  :subs/sub-pins\n  :<- [:subs/root]\n  (fn [subs _]\n    (:pinned subs)))\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n :code/execution-order?\n :<- [:code/root]\n (fn [code _]\n   (get code :execution-order? true)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n  :code/max-column-width\n  :<- [:settings/window-width-rounded 100]\n  :<- [:code/single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n  (fn [[window-width char-width] _]\n    (Math/ceil (/ window-width\n                  char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n\n;;\n\n(rf/reg-sub\n  :errors/root\n  (fn [db _]\n    (:errors db)))\n\n(rf/reg-sub\n  :errors/popup-failed?\n  :<- [:errors/root]\n  (fn [errors _]\n    (:popup-failed? errors)))\n\n;;\n\n(rf/reg-sub\n  :history/showing-history?\n  (fn [db _]\n    (get-in db [:history :showing-history?])))\n"]}